`ifndef DEFINE_STATE

// for top state - we have more states than needed
typedef enum logic [4:0] {
	S_IDLE,
	S_UART_RX,
	S_M1,
	S_M2

} top_state_type;

typedef enum logic [6:0] {
	
	S_M1_IDLE,
	S_M1_LEADIN_0,
	S_M1_LEADIN_1,
	S_M1_LEADIN_2,
	S_M1_LEADIN_3,
	S_M1_LEADIN_4,
	S_M1_LEADIN_5,
	S_M1_LEADIN_6,
	S_M1_LEADIN_7,
	S_M1_LEADIN_8,
	S_M1_LEADIN_9,
	S_M1_LEADIN_10,
	S_M1_LEADIN_11,
	S_M1_LEADIN_12,
	S_M1_LEADIN_13,
	S_M1_LEADIN_14,
	S_M1_LEADIN_15,
	S_M1_LEADIN_15_interm,
	S_M1_LEADIN_16,
	S_M1_LEADIN_17,
	S_M1_LEADIN_18,
	S_M1_LEADIN_19,
	S_M1_LEADIN_20,
	S_M1_LEADIN_21,
	S_M1_LEADIN_22,
	S_M1_LEADIN_23,
	S_M1_LEADIN_24,
	S_M1_LEADIN_25,
	S_M1_LEADIN_26,
	S_M1_CC0,
	S_M1_CC1,
	S_M1_CC2,
	S_M1_CC3,
	S_M1_CC4,
	S_M1_CC5,
	S_M1_CC6,
	S_M1_CC7,
	S_M1_CC8,
	S_M1_LEADOUT_0,
	S_M1_LEADOUT_1,
	S_M1_LEADOUT_2,
	S_M1_LEADOUT_3,
	S_M1_LEADOUT_4,
	S_M1_LEADOUT_5,
	S_M1_LEADOUT_6,
	S_M1_LEADOUT_7,
	S_M1_LEADOUT_8,
	S_M1_LEADOUT_9,
	S_M1_LEADOUT_10,
	S_M1_LEADOUT_11,
	S_M1_LEADOUT_12,
	S_M1_LEADOUT_13,
	S_M1_LEADOUT_14,
	S_M1_LEADOUT_15,
	S_M1_LEADOUT_15_interm,
	S_M1_LEADOUT_16,
	S_M1_LEADOUT_17,
	S_M1_LEADOUT_18,
	S_M1_LEADOUT_19,
	S_M1_LEADOUT_20,
	S_M1_LEADOUT_21,
	S_M1_LEADOUT_22,
	S_M1_LEADOUT_23,
	S_M1_LEADOUT_24,
	S_M1_LEADOUT_25,
	S_M1_LEADOUT_26,
	S_M1_LEADOUT_27,
	S_M1_LEADOUT_28,
	S_M1_LEADOUT_29,
	S_M1_LEADOUT_30,
	S_M1_LEADOUT_31,
	S_M1_LEADOUT_32,
	S_M1_LEADOUT_33,
	S_M1_LEADOUT_34,
	S_M1_LEADOUT_35,
	S_M1_LEADOUT_36,
	S_M1_LEADOUT_37,
	S_M1_LEADOUT_38,
	S_M1_LEADOUT_39,
	S_M1_LEADOUT_40,
	S_M1_LEADOUT_41,
	S_M1_LEADOUT_42
	

	
}M1_state_type;

typedef enum logic [6:0]{
	
	M2_IDLE,
	M2_FETCH_0,
	M2_FETCH_1,
	M2_FETCH_2,
	M2_FETCH_3,
	M2_COMPUTE_T_1,
	M2_COMPUTE_T_1write,
	M2_COMPUTE_T_2,
	M2_COMPUTE_T_2write,
	M2_COMPUTE_T_3,
	M2_COMPUTE_T_3write,
	M2_MEGASTATE_A,
	M2_COMPUTE_S_1,
	M2_COMPUTE_S_1write,
	M2_COMPUTE_S_2,
	M2_COMPUTE_S_2write,
	M2_COMPUTE_S_3,
	M2_COMPUTE_S_3write,
	M2_MEGASTATE_B,
	M2_COMPUTE_T_1b,
	M2_COMPUTE_T_1writeb,
	M2_COMPUTE_T_2b,
	M2_COMPUTE_T_2writeb,
	M2_COMPUTE_T_3b,
	M2_COMPUTE_T_3writeb,
	M2_test,
	M2_test2,
	M2_test3,
	M2_COMPUTE_S

}M2_state_type;

typedef enum logic [1:0] {
	S_RXC_IDLE,
	S_RXC_SYNC,
	S_RXC_ASSEMBLE_DATA,
	S_RXC_STOP_BIT
} RX_Controller_state_type;

typedef enum logic [2:0] {
	S_US_IDLE,
	S_US_STRIP_FILE_HEADER_1,
	S_US_STRIP_FILE_HEADER_2,
	S_US_START_FIRST_BYTE_RECEIVE,
	S_US_WRITE_FIRST_BYTE,
	S_US_START_SECOND_BYTE_RECEIVE,
	S_US_WRITE_SECOND_BYTE
} UART_SRAM_state_type;

typedef enum logic [3:0] {
	S_VS_WAIT_NEW_PIXEL_ROW,
	S_VS_NEW_PIXEL_ROW_DELAY_1,
	S_VS_NEW_PIXEL_ROW_DELAY_2,
	S_VS_NEW_PIXEL_ROW_DELAY_3,
	S_VS_NEW_PIXEL_ROW_DELAY_4,
	S_VS_NEW_PIXEL_ROW_DELAY_5,
	S_VS_FETCH_PIXEL_DATA_0,
	S_VS_FETCH_PIXEL_DATA_1,
	S_VS_FETCH_PIXEL_DATA_2,
	S_VS_FETCH_PIXEL_DATA_3
} VGA_SRAM_state_type;

parameter 
   VIEW_AREA_LEFT = 160,
   VIEW_AREA_RIGHT = 480,
   VIEW_AREA_TOP = 120,
   VIEW_AREA_BOTTOM = 360;

`define DEFINE_STATE 1
`endif
